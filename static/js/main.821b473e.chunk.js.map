{"version":3,"sources":["NewTodoInput.tsx","App.tsx","actions.ts","serviceWorker.ts","todoReducer.ts","store.ts","index.tsx"],"names":["NewTodoInput","addTodo","React","useState","todo","setNote","onChange","event","target","value","type","name","placeholder","className","onClick","length","alert","App","todos","useSelector","state","dispatch","useDispatch","payload","map","key","id","deleteTodo","Boolean","window","location","hostname","match","initialState","store","createStore","action","characters","charactersLength","i","charAt","Math","floor","random","newTodo","filter","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gRAOaA,G,MAA4C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAChDC,IAAMC,SAAS,IADiC,mBACjEC,EADiE,KAC3DC,EAD2D,KAgBxE,OACE,6BACE,2BACEC,SAhBa,SAACC,GAClBF,EAAQE,EAAMC,OAAOC,QAgBjBA,MAAOL,EACPM,KAAK,OACLC,KAAK,OACLC,YAAY,eAEd,4BAAQC,UAAU,YAAYC,QAlBX,WAClBV,EAAKW,QAAU,EAChBC,MAAM,oBAGRf,EAAQG,GACRC,EAAQ,OAYN,e,OCWSY,MArCf,WACE,IAAMC,EAAQC,aACZ,SAACC,GAAD,OAAWA,EAAMF,SAEbG,EAAWC,cAWjB,OACE,oCACE,wCACA,6BACA,kBAAC,EAAD,CAAcrB,QAbA,SAACG,GACjBiB,ECXmB,SAACjB,GAAD,MAA2B,CAChDM,KAAM,WACNa,QAASnB,GDSEH,CAAQG,OAaf,6BAAK,6BACL,6BACGc,EAAMH,OAAS,EACbG,EAAMM,KAAI,SAACpB,GACV,OACE,yBAAKS,UAAU,OAAOY,IAAKrB,EAAKsB,IAC9B,yBAAKb,UAAU,WAAWT,EAAKA,MAC/B,4BAAQS,UAAU,YAAYC,QAAS,WAhB9B,IAACY,IAgBiDtB,EAAKsB,GAf5EL,ECVsB,SAACK,GAAD,MAAyB,CACjDhB,KAAM,cACNa,QAASG,GDQEC,CAAWD,MAeR,mBAGD,yBAAKb,UAAU,QAAO,yBAAKA,UAAU,WAAf,kCExBjBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCZAC,EAAe,CACnBf,OAAK,EAAQ,GAAR,ICJMgB,EAAQC,aDOM,WAAqD,IAApDf,EAAmD,uDAAjCa,EAAcG,EAAmB,uCAC7E,OAAOA,EAAO1B,MACZ,IAAK,WAOH,IAHA,IAAIgB,EAAK,GACHW,EAAa,iEACbC,EAAmBD,EAAWtB,OAC1BwB,EAAI,EAAGA,EAAI,EAAGA,IACpBb,GAAMW,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAEvD,IAAMM,EAAU,CAACxC,KAAKgC,EAAOb,QAAQG,GAAGA,GAExC,OAAO,2BACFN,GADL,IACYF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmB0B,MAGtC,IAAK,cACH,IAAM1B,EAAQE,EAAMF,MAAM2B,QAAO,SAAAzC,GAAI,OAAEA,EAAKsB,KAAKU,EAAOb,WAExD,OADAuB,QAAQC,IAAI7B,GACL,2BAEFE,GAFL,IAEYF,MAAOA,IAGrB,QACE,OAAOE,ME7Bb4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUhB,MAAOA,GACf,kBAAC,EAAD,QAGJiB,SAASC,eAAe,SH6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMC,c","file":"static/js/main.821b473e.chunk.js","sourcesContent":["import React, { ChangeEvent } from \"react\";\r\nimport './App.css'\r\n\r\ninterface NewTodoInputProps {\r\n  addTodo(todo: string): void;\r\n}\r\n\r\nexport const NewTodoInput: React.FC<NewTodoInputProps> = ({ addTodo }) => {\r\n  const [todo, setNote] = React.useState(\"\");\r\n\r\n  const updateNote = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setNote(event.target.value);\r\n  };\r\n\r\n  const onAddNoteClick = () => {\r\n    if(todo.length <= 0){\r\n      alert('enter a todo...')\r\n      return\r\n    }\r\n    addTodo(todo);\r\n    setNote(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        onChange={updateNote}\r\n        value={todo}\r\n        type=\"text\"\r\n        name=\"note\"\r\n        placeholder=\"Add a Note\"\r\n      />\r\n      <button className='addButton' onClick={onAddNoteClick}>Add Note</button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { NewTodoInput } from \"./NewTodoInput\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { todoState } from \"./todoReducer\";\r\nimport { addTodo, deleteTodo } from \"./actions\";\r\n\r\nfunction App() {\r\n  const todos = useSelector<todoState, todoState[\"todos\"]>(\r\n    (state) => state.todos\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const onAddTodo = (todo: string) => {\r\n    dispatch(addTodo(todo));\r\n  };\r\n\r\n  \r\n  const onDelTodoClick = (id: string) => {\r\n    dispatch(deleteTodo(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>TODO-APP</h1>\r\n      <hr/>\r\n      <NewTodoInput addTodo={onAddTodo} />\r\n      <hr/><br/>\r\n      <div>\r\n        {todos.length > 0 ?\r\n          (todos.map((todo) => {\r\n            return (\r\n              <div className='todo' key={todo.id}>\r\n                <div className='content'>{todo.todo}</div>\r\n                <button className='delButton' onClick={()=>{onDelTodoClick(todo.id)}}>Delete Todo</button>\r\n              </div>\r\n            );\r\n          })):(<div className='todo'><div className='content'>You don't have any todo...</div></div>)\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export type Action = { type: string; payload: string };\r\n\r\nexport const addTodo = (todo: string): Action => ({\r\n  type: \"ADD_TODO\",\r\n  payload: todo,\r\n});\r\n\r\n\r\nexport const deleteTodo = (id: string): Action => ({\r\n  type: \"DELETE_TODO\",\r\n  payload: id,\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { Action } from \"./actions\"\r\n\r\nexport interface todoState {\r\n  todos: {todo: string, id: string}[]\r\n}\r\n\r\nconst initialState = {\r\n  todos : [] = []\r\n}\r\n\r\nexport const todoReducer = (state:todoState = initialState, action: Action) => {\r\n  switch(action.type){\r\n    case \"ADD_TODO\": {\r\n      //adding a todo with id\r\n\r\n      //generating a new id\r\n      let id = '';\r\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n      const charactersLength = characters.length;\r\n      for ( var i = 0; i < 4; i++ ) \r\n          id += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n\r\n      const newTodo = {todo:action.payload,id:id}\r\n      \r\n      return {\r\n        ...state, todos: [...state.todos, newTodo]\r\n      }\r\n    }\r\n    case \"DELETE_TODO\": {\r\n      const todos = state.todos.filter(todo=>todo.id!==action.payload)\r\n      console.log(todos)\r\n      return {\r\n        //delete todo by id\r\n        ...state, todos: todos\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}","import { createStore } from 'redux'\r\nimport {todoReducer} from './todoReducer'\r\n\r\nexport const store = createStore(todoReducer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\"\r\nimport {store} from './store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}